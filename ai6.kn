
const DEPTH: int :: 4
;探索の制限。石の周り何マスまで探索するか
const AROUND: int :: 1
+class AI()
	+func main(turn: int): []int
		var move: []int :: [-1, -1]
		do @MM(turn, turn, \game@map, @DEPTH, -9 * 10 ^ 9, 9 * 10 ^ 9, &move)
		ret move
	end func
end class

;AlphaBeta
;αがmax,βがmin
;置ける場所が多すぎる。相手と自分のの石の周りだけ探索
func MM(meTurn: int, turn: int, map: [][]int, depth: int, alpha: int, beta: int, move: &[]int): int
	;判定
	;、自分の勝利:turn,、引き分け:3
	var judge: int
	var score: int :: @eval(meTurn, map, &judge)
	;終了時
	if(depth = 0 | judge.abs() = 1 | judge = 3)
		ret score
	end if
	;次の一手で必ず勝負が決まるときで子ノードの時
	if(@reach(turn * -1, map) & depth <> @DEPTH)
		ret score
	end if
	
	var _move: []int :: [-1, -1]
	
	for X(0, \game@SIZE - 1)
		for Y(0, \game@SIZE - 1)
			if(@rule(X, Y, turn, map) & @around(X, Y, map))
				var _map: [][]int :: ##map
				do _map[X][Y] :: turn
				var value: int :: @MM(meTurn, turn * -1, _map, depth - 1, alpha, beta, &move)
				
				;do dbg@print("\{value},\{alpha}\n")
				if(alpha < value & turn = meTurn)
					do alpha :: value
					do _move :: [X, Y]
					
					if(depth = @DEPTH)
						;do dbg@print("depth:\{depth},α:\{alpha} \{X},\{Y}\n")
					end if
					;do dbg@print("depth:\{depth},α:\{alpha} \{X},\{Y}\n")
					;刈る
					if(beta <= alpha)
						break X
					end if
				end if
				
				if(value < beta & turn = meTurn * -1)
					
					do beta :: value
					;do dbg@print("turn:\{turn},depth:\{depth},α:\{alpha},β:\{beta} (\{X},\{Y}) (\{_move[0]},\{_move[1]})\n")
					
					
					if(depth = @DEPTH)
						;do dbg@print("depth:\{depth},β:\{beta} \{X},\{Y}\n")
					end if
					;do dbg@print("depth:\{depth},β:\{beta} \{X},\{Y}\n")
					;刈る
					if(beta <= alpha)
						break X
					end if
				end if
			end if
		end for
	end for
	
	if(depth = @DEPTH)
		do move :: _move
		do dbg@print("\{alpha}\n")
		ret 0
	else
		ret turn = meTurn ?(alpha, beta)
	end if
	
end func

;評価関数
func eval(turn: int, map: [][]int, judge: &int): int
	var value: int
	
	for x(0, \game@SIZE - 1)
		for y(0, \game@SIZE - 1)
			if(map[x][y] = turn)
				for i(0, 7)
					var count: int :: \game@get2(x, y, turn, i, map)
					if(!@search(x, y, turn * -1, i, count, map))
						do value :+ count
					end if
				end for
			end if
			if(map[x][y] = turn * -1)
				for i(0, 7)
					var _count: int :: \game@get2(x, y, turn * -1, i, map)
					if(!@search(x, y, turn, i, _count, map))
						do value :- _count
					end if
				end for
			end if
		end for
	end for
	
	do judge :: @judge(map, turn)
	
	if(judge = turn)
		do value :+ 999
	elif(judge = turn * -1)
		do value :- 999
	end if
	if(judge = turn * 2)
		do value :+ 500
	end if
	if(judge = turn * -2)
		do value :- 500
	end if
	ret value
end func



;AIからアクセスできるようにクラス外に置いた
+func rule(x: int, y: int, color: int, map: [][]int): bool
	;範囲内かどうか
	if(!(x >= 0 & y >= 0 & x < \game@SIZE & y < \game@SIZE))
		ret false
	end if
	;何もないか確認
	if(map[x][y] <> 0)
		ret false
	end if
	ret true
end func

func search(x: int, y: int, turn: int, way: int, wayCount: int, map: [][]int): bool
	var X: int
	var Y: int
	switch(way)
	case 0
		do X :: x
		do Y :: y - wayCount
	case 1
		do X :: x + wayCount
		do Y :: y - wayCount
	case 2
		do X :: x + wayCount
		do Y :: y
	case 3
		do X :: x + wayCount
		do Y :: y + wayCount
	case 4
		do X :: x
		do Y :: y + wayCount
	case 5
		do X :: x - wayCount
		do Y :: y + wayCount
	case 6
		do X :: x - wayCount
		do Y :: y
	case 7
		do X :: x - wayCount
		do Y :: y - wayCount
	end switch
	if(X >= 0 & Y >= 0 & X < \game@SIZE & Y < \game@SIZE)
		if(map[X][Y] = turn)
			ret true
		end if
	end if
	ret false
end func


;仮想マップでの勝敗判定
;5つ並んでいなくても勝敗が決まっている状態がある。それも含めるとする。
+func judge(map: [][]int, turn: int): int
	var WinF: int
	var ableMe: int
	var ableYou: int
	;勝敗確認
	for x(0, \game@SIZE - 1)
		for y(0, \game@SIZE - 1)
			for i(0, 7)
				if(map[x][y] <> 0)
					;自分の石が5つ並んでいるか
					if(\game@get2(x, y, turn, i, map) = 5)
						do WinF :: turn
						break x
					end if
					;相手の石が5つ並んでいるか
					if(\game@get2(x, y, turn * -1, i, map) = 5)
						do WinF :: turn * -1
						break x
					end if
				end if
			end for
			;置ける場所があるか
			if(@rule(x, y, turn, map))
				do ableMe :+ 1
			end if
			if(@rule(x, y, turn * -1, map))
				do ableYou :+ 1
			end if
			
		end for
	end for
	
	if(ableMe = 0 & ableYou = 0 & WinF = 0)
		do WinF :: 3
	end if
	ret WinF
end func

;2マス以内に石があるか確認する関数
func around(x: int, y: int, map: [][]int): bool
	
	var xUp: int :: x - @AROUND
	var yUp: int :: y - @AROUND
	var xDown: int :: x + @AROUND
	var yDown: int :: y + @AROUND
	
	if(@out(x, y))
		ret false
	end if
	for i(1, @AROUND)
		if(@out(xUp, y))
			do xUp :+ 1
		end if
	end for
	for i(1, @AROUND)
		if(@out(x, yUp))
			do yUp :+ 1
		end if
	end for
	for i(1, @AROUND)
		if(@out(xDown, y))
			do xDown :- 1
		end if
	end for
	for i(1, @AROUND)
		if(@out(x, yDown))
			do yDown :- 1
		end if
	end for
	for X(xUp, xDown)
		for Y(yUp, yDown)
			if(map[X][Y] <> 0)
				ret true
			end if
		end for
	end for
	
	ret false
end func
;盤面の外だったら真
func out(x: int, y: int): bool
	if(x >= 0 & y >= 0 & x < \game@SIZE & y < \game@SIZE)
		ret false
	end if
	ret true
end func

func reach(turn: int, map: [][]int): bool
	for x(0, \game@SIZE - 1)
		for y(0, \game@SIZE - 1)
			for i(0, 7)
				if(map[x][y] <> 0)
					;自分の石が4つ並んでいるか
					if(\game@get2(x, y, turn, i, map) = 4 & !@search(x, y, turn * -1, i, 4, map) & !@search(x, y, turn * -1, (i + 4) % 8, 1, map))
						ret true
					end if
				end if
			end for
		end for
	end for
end func

